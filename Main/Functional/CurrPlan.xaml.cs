using DBSolom;
using Microsoft.CSharp;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace Main.Functional
{
    public partial class CurrPlan : Window
    {
        #region "Variables"

        CurrPlanEntities GetCurrPlanEntities { get; set; }

        public string type = "";
        public string prop = "";
        public object value = null;
        public int counterForDGMColumns = 0;
        public int counterElementsDGM = 0;

        public List<Label> GetLabels = new List<Label>();
        public Dictionary<string, ComboBox> dict_cmb = new Dictionary<string, ComboBox>();
        public Dictionary<string, TextBox> dict_txt = new Dictionary<string, TextBox>();
        List<Filters> GetFilters = new List<Filters>();
        public List<ToggleButton> CheckBoxes = new List<ToggleButton>();
        bool IsInitialization = true;
        CollectionViewSource CollectionViewSource { get; set; }

        DBSolom.Db db { get; set; }

        #endregion

        public CurrPlan()
        {
            InitializeComponent();

            CollectionViewSource = ((CollectionViewSource)FindResource("cvs"));

            CollectionViewSource.Filter += Func.CollectionView_Filter;

            DGM.GroupStyle.Add(((GroupStyle)FindResource("one")));
            DGM.AutoGeneratedColumns += DGM_AutoGeneratedColumns;

            BTN_Accept.Click += BTN_Accept_Click;
            BTN_Reset.Click += BTN_Reset_Click;
            BTN_ResetGroup.Click += BTN_ResetGroup_Click;
            BTN_ExportToExcel.Click += Func.BTN_ExportToExcel_Click;
        }

        private void DGM_AutoGeneratedColumns(object sender, EventArgs e)
        {
            counterForDGMColumns = 0;
        }

        private void DatePicker_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            if (SDate.SelectedDate != null && EDate.SelectedDate != null)
            {
                db = new Db(Func.GetConnectionString);

                #region "Clear filters, groups and visibility"
                if (IsInitialization == false)
                {
                    dict_cmb.Values.ToList().ForEach(cmb => cmb.SelectedValue = null);
                    dict_txt.Values.ToList().ForEach(txt => txt.Text = null);
                    CheckBoxes.ForEach(a => a.IsChecked = false);
                    EXPHDN.Children.Cast<ToggleButton>().ToList().ForEach(tgb => tgb.IsChecked = true);

                    type = "";
                    prop = "";
                    value = null;

                    LBFilters.Items.Clear();
                    GetFilters.Clear();
                }
                #endregion

                GetCurrPlanEntities = new CurrPlanEntities(db, (DateTime)SDate.SelectedDate, (DateTime)EDate.SelectedDate);
                CollectionViewSource.Source = GetCurrPlanEntities.GetEntities;
                DGM.ItemsSource = CollectionViewSource.View;

                if (IsInitialization)
                {
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("Головний_розпорядник.Найменування", ListSortDirection.Ascending));
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("Фонд.Код", ListSortDirection.Ascending));
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("Мікрофонд.Повністю", ListSortDirection.Ascending));
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("КФК.Код", ListSortDirection.Ascending));
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("КФБ.Код", ListSortDirection.Ascending));
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("КДБ.Код", ListSortDirection.Ascending));
                    CollectionViewSource.SortDescriptions.Add(new SortDescription("КЕКВ.Код", ListSortDirection.Ascending));

                    int t = 0;
                    foreach (ItemPropertyInfo item in ((IItemProperties)DGM.Items).ItemProperties)
                    {
                        Func.GetFilters(EXPGRO, t, item, ref dict_cmb, ref dict_txt, ref GetLabels);

                        Func.GetGroups(t, item, ref CheckBoxes, ref EXPGRT);

                        Func.GetVisibilityOfColumns(t, item, ref EXPHDN);

                        t++;
                    }

                    IsInitialization = false;
                }

                counterElementsDGM = GetCurrPlanEntities.GetEntities.Count;
                CollectionViewSource.View.Refresh();
                DGM.FrozenColumnCount = 7;
            }
        }

        #region "BUTTONS"
        public void BTN_Accept_Click(object sender, RoutedEventArgs e)
        {
            Filters filters = new Filters();
            string str = "";
            bool first = true;

            for (int i = 0; i < GetLabels.Count; i++)
            {
                if (dict_txt[GetLabels[i].Content.ToString()].Text != "")
                {
                    type = dict_cmb[GetLabels[i].Content.ToString()].Text;
                    prop = GetLabels[i].Content.ToString();
                    value = dict_txt[GetLabels[i].Content.ToString()].Text;
                    filters.GetFilters.Add(new Dictionary<string, dynamic>() { { "type", type }, { "prop", prop }, { "value", value } });

                    str += first ? prop + " " + type + " " + value : " & " + prop + " " + type + " " + value;
                    first = false;
                }
            }

            LBFilters.Items.Add(str);

            for (int i = 0; i < dict_cmb.Count; i++)
            {
                dict_cmb.Select(s => s.Value).ToList()[i].SelectedValue = null;
                dict_txt.Select(s => s.Value).ToList()[i].Text = null;
            }
            type = "";
            prop = "";
            value = null;

            GetFilters.Add(filters);

            CollectionViewSource.GetDefaultView(DGM.ItemsSource).Refresh();
        }
        public void BTN_Reset_Click(object sender, RoutedEventArgs e)
        {
            dict_cmb.Values.ToList().ForEach(cmb => cmb.SelectedValue = null);
            dict_txt.Values.ToList().ForEach(txt => txt.Text = null);

            type = "";
            prop = "";
            value = null;

            LBFilters.Items.Clear();
            GetFilters.Clear();
            CollectionViewSource.GetDefaultView(DGM.ItemsSource).Refresh();
        }
        public void BTN_ResetGroup_Click(object sender, RoutedEventArgs e)
        {
            ICollectionView cvTasks = CollectionViewSource.GetDefaultView(DGM.ItemsSource);
            CheckBoxes.ForEach(a => a.IsChecked = false);
            cvTasks.GroupDescriptions.Clear();
        }
        #endregion

        private void DGM_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            Func.GenerateColumnForDataGrid(db, ref counterForDGMColumns, e);
        }

        private void DGM_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            try
            {
                if (DGM.SelectedCells.Count > 0 && EVAL.IsExpanded)
                {
                    if (DGM.SelectedCells.Count == 1)
                    {
                        if (Func.names_months.Concat(new List<string>() { "Рік", "Період" }).Contains(e.AddedCells[0].Column.Header.ToString()))
                        {
                            double d;
                            double.TryParse(DGM.SelectedCells.First().Item.GetType().GetProperty(DGM.SelectedCells.FirstOrDefault().Column.Header.ToString()).GetValue(DGM.SelectedCells.First().Item).ToString(), out d);

                            GRPBElm.Content = "1";
                            GRPBSum.Content = d.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                            GRPBSred.Content = "";
                            GRPBMin.Content = "";
                            GRPBMax.Content = "";
                        }
                    }
                    else
                    {
                        double sum = 0;
                        int counter = 0;
                        double min = double.MaxValue;
                        double max = 0;
                        foreach (var item in DGM.SelectedCells)
                        {
                            double d;
                            if (double.TryParse(item.Item.GetType().GetProperty(item.Column.Header.ToString()).GetValue(item.Item)?.ToString(), out d))
                            {
                                if (d > max)
                                {
                                    max = d;
                                }
                                if (d < min)
                                {
                                    min = d;
                                }
                                counter++;
                                sum += d;
                            }
                        }
                        GRPBElm.Content = counter.ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBSum.Content = sum.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBSred.Content = (sum == 0 ? 0 : sum / counter).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBMin.Content = min.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBMax.Content = max.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                    }
                }
            }
            catch (Exception)
            {

            }
        }
    }

    class CurrPlanEntities
    {
        public List<CurrPlanEntity> GetEntities { get; set; }
        long Id = 1;
        DBSolom.Db db { get; set; }

        public CurrPlanEntities(DBSolom.Db db, DateTime start, DateTime end)
        {
            this.db = db;
            GetEntities = new List<CurrPlanEntity>();
            FillEntities(start, end);
        }
        private void FillEntities(DateTime s, DateTime e)
        {
            DateTime endDateTime = e.AddDays(1) - TimeSpan.FromSeconds(1);

            var qp = db.Microfillings
                            .Include(i => i.Головний_розпорядник)
                            .Include(i => i.КЕКВ)
                            .Include(i => i.КФК)
                            .Include(i => i.Мікрофонд.Фонд)
                    .Where(w => w.Видалено == false && w.Проведено.Year >= s.Year && w.Проведено.Year <= e.Year)
                    .Select(ss => new { ss.Головний_розпорядник, ss.Мікрофонд, ss.КФК, ss.КФБ, ss.КДБ, ss.КЕКВ, ss.Січень, ss.Лютий, ss.Березень, ss.Квітень, ss.Травень, ss.Червень, ss.Липень, ss.Серпень, ss.Вересень, ss.Жовтень, ss.Листопад, ss.Грудень })
                    .Union(
                        db.Corrections
                                    .Include(i => i.Головний_розпорядник)
                                    .Include(i => i.КЕКВ)
                                    .Include(i => i.КФК)
                                    .Include(i => i.Мікрофонд.Фонд)
                                    .Where(w => w.Видалено == false && w.Проведено >= s && w.Проведено <= endDateTime)
                                    .Select(ss => new { ss.Головний_розпорядник, ss.Мікрофонд, ss.КФК, ss.КФБ, ss.КДБ, ss.КЕКВ, ss.Січень, ss.Лютий, ss.Березень, ss.Квітень, ss.Травень, ss.Червень, ss.Липень, ss.Серпень, ss.Вересень, ss.Жовтень, ss.Листопад, ss.Грудень }))

                        .GroupBy(g => new { g.Головний_розпорядник, g.Мікрофонд, g.КФК, g.КФБ, g.КДБ, g.КЕКВ, }).ToList();
            foreach (var item in qp)
            {
                CurrPlanEntity currPlanEntity = new CurrPlanEntity(db,
                    Id, item.Key.Головний_розпорядник, item.Key.Мікрофонд, item.Key.КФК, item.Key.КФБ, item.Key.КДБ, item.Key.КЕКВ,
                    item.Select(ss => ss.Січень).Sum(),
                    item.Select(ss => ss.Лютий).Sum(),
                    item.Select(ss => ss.Березень).Sum(),
                    item.Select(ss => ss.Квітень).Sum(),
                    item.Select(ss => ss.Травень).Sum(),
                    item.Select(ss => ss.Червень).Sum(),
                    item.Select(ss => ss.Липень).Sum(),
                    item.Select(ss => ss.Серпень).Sum(),
                    item.Select(ss => ss.Вересень).Sum(),
                    item.Select(ss => ss.Жовтень).Sum(),
                    item.Select(ss => ss.Листопад).Sum(),
                    item.Select(ss => ss.Грудень).Sum());
                GetEntities.Add(currPlanEntity);
                Id++;
            }
        }
    }

    class CurrPlanEntity
    {
        public CurrPlanEntity(DBSolom.Db db, long Id, Main_manager main_Manager, MicroFoundation microFoundation, KFK kFK, KFB kFB, KDB kDB, KEKB kEKB, double one, double two, double three, double four, double five, double six, double seven, double eight, double nine, double ten, double eleven, double twelve)
        {
            this.Id = Id;
            Головний_розпорядник = main_Manager;
            if (microFoundation.Фонд is null)
            {
                Фонд = db.MicroFoundations.Include(i => i.Фонд).FirstOrDefault(w => w.Видалено == false && w.Повністю == microFoundation.Повністю).Фонд;
            }
            else
            {
                Фонд = microFoundation.Фонд;
            }
            Мікрофонд = microFoundation;
            КФК = kFK;
            КФБ = kFB;
            КДБ = kDB;
            КЕКВ = kEKB;
            Січень = one;
            Лютий = two;
            Березень = three;
            Квітень = four;
            Травень = five;
            Червень = six;
            Липень = seven;
            Серпень = eight;
            Вересень = nine;
            Жовтень = ten;
            Листопад = eleven;
            Грудень = twelve;
        }

        public long Id { get; set; }
        public Main_manager Головний_розпорядник { get; set; }
        public Foundation Фонд { get; set; }
        public MicroFoundation Мікрофонд { get; set; }
        public KFK КФК { get; set; }
        public KFB КФБ { get; set; }
        public KDB КДБ { get; set; }
        public KEKB КЕКВ { get; set; }
        public double Січень { get; set; }
        public double Лютий { get; set; }
        public double Березень { get; set; }
        public double Квітень { get; set; }
        public double Травень { get; set; }
        public double Червень { get; set; }
        public double Липень { get; set; }
        public double Серпень { get; set; }
        public double Вересень { get; set; }
        public double Жовтень { get; set; }
        public double Листопад { get; set; }
        public double Грудень { get; set; }
    }

    #region "Converters"

    public class CurrPlanGroupTotalConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        foreach (var item in Func.names_months)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => (double)((CurrPlanEntity)s).GetType().GetProperty(item).GetValue(s))
                                    .Sum());
                        }
                        
                    }
                }
                return sum;
            }
            else
            {
                foreach (var item in Func.names_months)
                {
                    sum += (items.Select(s => (double)((CurrPlanEntity)s).GetType().GetProperty(item).GetValue(s))
                            .Sum());
                }
                
                return sum;
            }
        }
    }
    public class CurrPlanGroupOneConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Січень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Січень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupTwoConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Лютий)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Лютий)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupThreeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Березень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Березень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupFourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Квітень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Квітень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupFiveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Травень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Травень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupSixConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Червень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Червень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupSevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Липень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Липень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupEightConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Серпень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Серпень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupNineConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Вересень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Вересень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupTenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Жовтень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Жовтень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupElevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Листопад)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Листопад)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupTwelveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Select(s => ((CurrPlanEntity)s).Грудень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Select(s => ((CurrPlanEntity)s).Грудень)
                            .Sum());
                return sum;
            }
        }
    }

    #endregion
}
