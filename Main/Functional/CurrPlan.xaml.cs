using DBSolom;
using Microsoft.CSharp;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace Main.Functional
{
    public partial class CurrPlan : Window
    {
        #region "Variables"

        CurrPlanEntities GetCurrPlanEntities { get; set; }

        public string type = "";
        public string prop = "";
        public object value = null;
        public int counterForDGMColumns = 0;
        public int counterElementsDGM = 0;

        public List<Label> GetLabels = new List<Label>();
        public Dictionary<string, ComboBox> dict_cmb = new Dictionary<string, ComboBox>();
        public Dictionary<string, TextBox> dict_txt = new Dictionary<string, TextBox>();
        List<Filters> GetFilters = new List<Filters>();
        public List<ToggleButton> CheckBoxes = new List<ToggleButton>();

        #endregion

        public CurrPlan()
        {
            InitializeComponent();

            ((CollectionViewSource)FindResource("cvs")).Filter += Func.CollectionView_Filter;

            DGM.GroupStyle.Add(((GroupStyle)FindResource("one")));
            DGM.AutoGeneratedColumns += DGM_AutoGeneratedColumns;

            BTN_Accept.Click += BTN_Accept_Click;
            BTN_Reset.Click += BTN_Reset_Click;
            BTN_ResetGroup.Click += BTN_ResetGroup_Click;
            BTN_ExportToExcel.Click += BTN_ExportToExcel_Click;
            btnAddEval.Click += BtnAddEval_Click;

            EXPMAESTRO.MouseEnter += Func.Expander_MouseEnter;
            EXPMAESTRO.MouseLeave += Func.Expander_MouseLeave;

            DGMSandBox.AutoGeneratedColumns += DGMSandBox_AutoGeneratedColumns;
            DGMSandBox.AutoGeneratingColumn += DGMSandBox_AutoGeneratingColumn;
            SandBoxEntities sandBoxEntities = new SandBoxEntities();
            DGMSandBox.ItemsSource = sandBoxEntities.GetSandBoxEntities;
        }

        private void DGM_AutoGeneratedColumns(object sender, EventArgs e)
        {
            counterForDGMColumns = 0;
        }

        private void DGMSandBox_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            Func.GenerateColumnForDataGrid(ref counterForDGMColumns, e);
        }

        private void DGMSandBox_AutoGeneratedColumns(object sender, EventArgs e)
        {
            counterForDGMColumns = 0;
        }

        private void BtnAddEval_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (DGM.Items.Count == 0)
                {
                    MessageBox.Show("Відсутні дані! Оберіть період!", "Виконання", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                foreach (SandBoxEntity item in DGMSandBox.ItemsSource)
                {
                    if (item != null && item.Операція is null && (((ObservableCollection<SandBoxEntity>)DGMSandBox.ItemsSource).Last().Id != item.Id))
                    {
                        MessageBox.Show("Заповність усі операції, окрім останньої!", "Розрахунок", MessageBoxButton.OK, MessageBoxImage.Hand);

                        return;
                    }
                }

                CurrPlanEntity[] entities = new CurrPlanEntity[DGM.Items.Count];
                DGM.Items.CopyTo(entities, 0);
                var q = entities.ToList();
                List<List<CurrPlanEntity>> List = new List<List<CurrPlanEntity>>();
                dynamic result = 0;
                string ss = "";
                foreach (SandBoxEntity item in DGMSandBox.ItemsSource)
                {
                    foreach (var micro_item in new List<string> { "Фонд", "Мікрофонд", "КФК", "Головний_розпорядник", "КДБ", "КЕКВ", "Дані", "Операція" })
                    {

                        if (item.GetType().GetProperty(micro_item).GetValue(item) != null && micro_item != "Операція")
                        {
                            ss += micro_item + $"[{((ComboBox)DGMSandBox.Columns.First(w => w.Header.ToString() == micro_item).GetCellContent(item)).Text}] ";
                            q = q.Where(w => w.GetType().GetProperty(micro_item).GetValue(w) == item.GetType().GetProperty(micro_item).GetValue(item)).ToList();
                        }
                        else if (micro_item == "Операція" && item.GetType().GetProperty(micro_item).GetValue(item) == null)
                        {
                            if (List.Count == 0)
                            {
                                ss += $"{item.GetType().GetProperty(micro_item).GetValue(item)} ";
                                continue;
                            }

                            #region "Core of all sum and operations"

                            List<double> core_list = new List<double>();
                            List<string> operations = new List<string>();

                            int alfa = 0;
                            foreach (SandBoxEntity o in DGMSandBox.ItemsSource)
                            {
                                if (o.Операція != null)
                                {
                                    operations.Add(o.Операція);
                                    core_list.Add(List[alfa].Select(s => (double)s.GetType().GetProperty(item.GetType().GetProperty("Значення").GetValue(item).ToString()).GetValue(s)).Sum());
                                    alfa++;
                                }
                            }
                            core_list.Add(q.Select(s => (double)s.GetType().GetProperty(item.GetType().GetProperty("Значення").GetValue(item).ToString()).GetValue(s)).Sum());

                            #endregion

                            #region "Core eval operation [+,-,/,*,==,!=,....]"
                            string endstring = $"return ";
                            for (int i = 0; i < core_list.Count; i++)
                            {
                                if (operations.Count != i)
                                {
                                    endstring += $"{core_list[i]} {operations[i]} ";
                                }
                                else
                                {
                                    endstring += $"{core_list[i]};";
                                }
                            }

                            result = Tech.CodeGeneration.CodeGenerator.ExecuteCode<dynamic>(endstring);
                            ss += "\n ====>>>>> " + result.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                            #endregion
                        }
                    }
                    if (item.Операція != null)
                    {
                        ss += item.Операція + "\n";
                    }

                    List.Add(q.ToList());
                    q = entities.ToList();
                }
                EVALUATE.Items.Add(ss);

                SandBoxEntities sandBoxEntities = new SandBoxEntities();
                DGMSandBox.ItemsSource = sandBoxEntities.GetSandBoxEntities;
            }
            catch (Exception)
            {
                SandBoxEntities sandBoxEntities = new SandBoxEntities();
                DGMSandBox.ItemsSource = sandBoxEntities.GetSandBoxEntities;
            }
        }

        private void DatePicker_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            if (SDate.SelectedDate != null && EDate.SelectedDate != null)
            {
                #region "Clear filters, groups and visibility"
                dict_cmb.Values.ToList().ForEach(cmb => cmb.SelectedValue = null);
                dict_txt.Values.ToList().ForEach(txt => txt.Text = null);
                CheckBoxes.ForEach(a => a.IsChecked = false);
                EXPHDN.Children.Cast<ToggleButton>().ToList().ForEach(tgb => tgb.IsChecked = true);

                type = "";
                prop = "";
                value = null;

                LBFilters.Items.Clear();
                GetFilters.Clear();
                #endregion

                GetCurrPlanEntities = new CurrPlanEntities((DateTime)SDate.SelectedDate, (DateTime)EDate.SelectedDate);
                CollectionViewSource cvs = ((CollectionViewSource)FindResource("cvs"));
                cvs.Source = GetCurrPlanEntities.GetEntities;
                DGM.ItemsSource = cvs.View;
                cvs.SortDescriptions.Add(new SortDescription("КФК.Код", ListSortDirection.Ascending));
                cvs.SortDescriptions.Add(new SortDescription("Головний_розпорядник.Найменування", ListSortDirection.Ascending));
                cvs.SortDescriptions.Add(new SortDescription("Фонд.Код", ListSortDirection.Ascending));
                cvs.SortDescriptions.Add(new SortDescription("Мікрофонд.Повністю", ListSortDirection.Ascending));
                cvs.SortDescriptions.Add(new SortDescription("КДБ.Код", ListSortDirection.Ascending));
                cvs.SortDescriptions.Add(new SortDescription("КЕКВ.Код", ListSortDirection.Ascending));
                cvs.SortDescriptions.Add(new SortDescription("Дані", ListSortDirection.Ascending));

                if (CheckBoxes.Count == 0)
                {
                    var t = 0;
                    foreach (var item in ((IItemProperties)DGM.Items).ItemProperties)
                    {
                        Func.GetFilters(EXPGRO, t, item, ref dict_cmb, ref dict_txt, ref GetLabels);

                        Func.GetGroups(t, item, ref CheckBoxes, ref EXPGRT);

                        Func.GetVisibilityOfColumns(t, item, ref EXPHDN);

                        t++;
                    }
                }


                counterElementsDGM = GetCurrPlanEntities.GetEntities.Count;
                cvs.View.Refresh();
                DGM.FrozenColumnCount = 8;
            }
        }

        #region "BUTTONS"
        public void BTN_Accept_Click(object sender, RoutedEventArgs e)
        {
            Filters filters = new Filters();
            string str = "";
            bool first = true;

            for (int i = 0; i < GetLabels.Count; i++)
            {
                if (dict_txt[GetLabels[i].Content.ToString()].Text != "")
                {
                    type = dict_cmb[GetLabels[i].Content.ToString()].Text;
                    prop = GetLabels[i].Content.ToString();
                    value = dict_txt[GetLabels[i].Content.ToString()].Text;
                    filters.GetFilters.Add(new Dictionary<string, dynamic>() { { "type", type }, { "prop", prop }, { "value", value } });

                    str += first ? prop + " " + type + " " + value : " & " + prop + " " + type + " " + value;
                    first = false;
                }
            }

            LBFilters.Items.Add(str);

            for (int i = 0; i < dict_cmb.Count; i++)
            {
                dict_cmb.Select(s => s.Value).ToList()[i].SelectedValue = null;
                dict_txt.Select(s => s.Value).ToList()[i].Text = null;
            }
            type = "";
            prop = "";
            value = null;

            GetFilters.Add(filters);

            CollectionViewSource.GetDefaultView(DGM.ItemsSource).Refresh();
        }
        public void BTN_Reset_Click(object sender, RoutedEventArgs e)
        {
            dict_cmb.Values.ToList().ForEach(cmb => cmb.SelectedValue = null);
            dict_txt.Values.ToList().ForEach(txt => txt.Text = null);

            type = "";
            prop = "";
            value = null;

            LBFilters.Items.Clear();
            GetFilters.Clear();
            CollectionViewSource.GetDefaultView(DGM.ItemsSource).Refresh();
        }
        public void BTN_ResetGroup_Click(object sender, RoutedEventArgs e)
        {
            ICollectionView cvTasks = CollectionViewSource.GetDefaultView(DGM.ItemsSource);
            CheckBoxes.ForEach(a => a.IsChecked = false);
            cvTasks.GroupDescriptions.Clear();
        }
        private void BTN_ExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            bool IsExist = false;
            if (DGM.SelectedCells.Count > 0)
            {
                List<CurrPlanEntity> currPlanEntities = new List<CurrPlanEntity>();

                foreach (var item in DGM.SelectedCells)
                {
                    if (item.Item.ToString() != "{NewItemPlaceholder}" && currPlanEntities.FirstOrDefault(f => f.Id == ((CurrPlanEntity)item.Item).Id) is null)
                    {
                        currPlanEntities.Add(((CurrPlanEntity)item.Item));
                    }
                }

                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Filter = "Excel files (*.xlsx;*.xlsm;*.xls)|*.xlsx;*.xlsm;*.xls";
                if (openFileDialog.ShowDialog() == true)
                {
                    PB.Minimum = 0;
                    PB.Maximum = currPlanEntities.Count;
                    PB.Value = 1;

                    Action action = () => { PB.Value++; };
                    var Task = new Task(() =>
                    {
                        Microsoft.Office.Interop.Excel.Application application = new Microsoft.Office.Interop.Excel.Application();
                        application.AskToUpdateLinks = false;
                        application.DisplayAlerts = false;
                        Microsoft.Office.Interop.Excel.Workbook workbook = application.Workbooks.Open(openFileDialog.FileName);
                        Microsoft.Office.Interop.Excel.Worksheet worksheet = null;

                        foreach (Microsoft.Office.Interop.Excel.Worksheet item in workbook.Worksheets)
                        {
                            if (item.Name == "Maestro_Data")
                            {
                                IsExist = true;
                                worksheet = item;
                                break;
                            }
                        }

                        if (IsExist)
                        {
                            worksheet.Cells.Clear();
                            if (worksheet.ListObjects.Count != 0)
                            {
                                for (int i = 0; i < worksheet.ListObjects.Count; i++)
                                {
                                    if (worksheet.ListObjects[i].Name == "Maestro_DataTable")
                                    {
                                        worksheet.ListObjects.Item[i].Delete();
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            worksheet = workbook.Worksheets.Add();
                            worksheet.Name = "Maestro_Data";
                        }

                        int r = 1;
                        worksheet.Cells[r, 1] = "Id";
                        worksheet.Cells[r, 2] = "Фонд";
                        worksheet.Cells[r, 3] = "Мікрофонд";
                        worksheet.Cells[r, 4] = "КФК";
                        worksheet.Cells[r, 5] = "Головний_розпорядник";
                        worksheet.Cells[r, 6] = "КДБ";
                        worksheet.Cells[r, 7] = "КЕКВ";
                        worksheet.Cells[r, 8] = "Дані";
                        worksheet.Cells[r, 9] = "Рік";
                        worksheet.Cells[r, 10] = "Період";
                        worksheet.Cells[r, 11] = "Січень";
                        worksheet.Cells[r, 12] = "Лютий";
                        worksheet.Cells[r, 13] = "Березень";
                        worksheet.Cells[r, 14] = "Квітень";
                        worksheet.Cells[r, 15] = "Травень";
                        worksheet.Cells[r, 16] = "Червень";
                        worksheet.Cells[r, 17] = "Липень";
                        worksheet.Cells[r, 18] = "Серпень";
                        worksheet.Cells[r, 19] = "Вересень";
                        worksheet.Cells[r, 20] = "Жовтень";
                        worksheet.Cells[r, 21] = "Листопад";
                        worksheet.Cells[r, 22] = "Грудень";
                        r++;

                        worksheet.ListObjects.Add(Microsoft.Office.Interop.Excel.XlListObjectSourceType.xlSrcRange, worksheet.Range[worksheet.Cells[1, 1], worksheet.Cells[currPlanEntities.Count, 22]], Type.Missing, Microsoft.Office.Interop.Excel.XlYesNoGuess.xlYes, Type.Missing).Name = "Maestro_DataTable";

                        foreach (var item in currPlanEntities)
                        {
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 1] = item.Id;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 2] = item.Фонд.Код;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 3] = item.Мікрофонд.Повністю;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 4] = item.КФК.Код;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 5] = item.Головний_розпорядник.Найменування;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 6] = item.КДБ.Код;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 7] = item.КЕКВ.Код;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 8] = item.Дані;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 9] = item.Рік;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 10] = item.Період;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 11] = item.Січень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 12] = item.Лютий;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 13] = item.Березень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 14] = item.Квітень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 15] = item.Травень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 16] = item.Червень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 17] = item.Липень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 18] = item.Серпень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 19] = item.Вересень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 20] = item.Жовтень;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 21] = item.Листопад;
                            worksheet.ListObjects["Maestro_DataTable"].Range.Cells[r, 22] = item.Грудень;
                            PB.Dispatcher.Invoke(action);
                            r++;
                        }
                        MessageBox.Show("Виконано!", "Maestro", MessageBoxButton.OK, MessageBoxImage.Information);
                        application.Visible = true;
                        openFileDialog = null;
                        application = null;
                        workbook = null;
                        worksheet = null;
                        PB.Dispatcher.Invoke(() => PB.Value = 0);
                    });

                    Task.Start();
                }
            }
            else
            {
                MessageBox.Show("Виділіть всі строки, які будуть експортовані!", "Maestro", MessageBoxButton.OK, MessageBoxImage.Hand);
            }
        }
        private void BTN_Clear_SANDBOX_Click(object sender, RoutedEventArgs e)
        {
            EVALUATE.Items.Clear();
        }
        #endregion

        private void DGM_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            Func.GenerateColumnForDataGrid(ref counterForDGMColumns, e);
        }

        private void DGM_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            try
            {
                if (DGM.SelectedCells.Count > 0 && EVAL.IsExpanded)
                {
                    if (DGM.SelectedCells.Count == 1)
                    {
                        if (Func.GetDB.names_months.Concat(new List<string>() { "Рік", "Період" }).Contains(e.AddedCells[0].Column.Header.ToString()))
                        {
                            double d;
                            double.TryParse(DGM.SelectedCells.First().Item.GetType().GetProperty(DGM.SelectedCells.FirstOrDefault().Column.Header.ToString()).GetValue(DGM.SelectedCells.First().Item).ToString(), out d);

                            GRPBElm.Content = "1";
                            GRPBSum.Content = d.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                            GRPBSred.Content = "";
                            GRPBMin.Content = "";
                            GRPBMax.Content = "";
                        }
                    }
                    else
                    {
                        double sum = 0;
                        int counter = 0;
                        double min = double.MaxValue;
                        double max = 0;
                        foreach (var item in DGM.SelectedCells)
                        {
                            double d;
                            if (double.TryParse(item.Item.GetType().GetProperty(item.Column.Header.ToString()).GetValue(item.Item)?.ToString(), out d))
                            {
                                if (d > max)
                                {
                                    max = d;
                                }
                                if (d < min)
                                {
                                    min = d;
                                }
                                counter++;
                                sum += d;
                            }
                        }
                        GRPBElm.Content = counter.ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBSum.Content = sum.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBSred.Content = (sum == 0 ? 0 : sum / counter).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBMin.Content = min.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                        GRPBMax.Content = max.ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
                    }
                }
            }
            catch (Exception)
            {

            }
        }
    }

    class CurrPlanEntities
    {
        public List<CurrPlanEntity> GetEntities { get; set; }
        public CurrPlanEntities(DateTime start, DateTime end)
        {
            GetEntities = new List<CurrPlanEntity>();
            FillEntities(start, end);
        }
        private void FillEntities(DateTime s, DateTime e)
        {
            int Id = 1;
            DateTime endDateTime = e.AddDays(1) - TimeSpan.FromSeconds(1);

            var qp = Func.GetDB.Microfillings
                            .Include(i => i.Головний_розпорядник)
                            .Include(i => i.КДБ)
                            .Include(i => i.КЕКВ)
                            .Include(i => i.КФК)
                            .Include(i => i.Мікрофонд.Фонд)
                    .Where(w => w.Видалено == false && w.Проведено.Year >= s.Year && w.Проведено.Year <= e.Year).ToList();

            var qc = Func.GetDB.Corrections
                    .Include(i => i.Головний_розпорядник)
                    .Include(i => i.КДБ)
                    .Include(i => i.КЕКВ)
                    .Include(i => i.КФК)
                    .Include(i => i.Мікрофонд.Фонд)
                    .Where(w => w.Видалено == false && w.Проведено >= s && w.Проведено <= endDateTime).ToList();

            var qf = Func.GetDB.Financings
                    .Include(i => i.Головний_розпорядник)
                    .Include(i => i.КДБ)
                    .Include(i => i.КЕКВ)
                    .Include(i => i.КФК)
                    .Include(i => i.Мікрофонд.Фонд)
                    .Where(w => w.Видалено == false && w.Проведено >= s && w.Проведено <= endDateTime).ToList();


            foreach (var item in qp)
            {
                CurrPlanEntity currPlanEntity = new CurrPlanEntity(Id, e.Month, item.Головний_розпорядник, item.Мікрофонд, item.КФК, item.КЕКВ, item.КДБ, "План",
                    item.Січень,
                    item.Лютий,
                    item.Березень,
                    item.Квітень,
                    item.Травень,
                    item.Червень,
                    item.Липень,
                    item.Серпень,
                    item.Вересень,
                    item.Жовтень,
                    item.Листопад,
                    item.Грудень);

                GetEntities.Add(currPlanEntity);
                Id++;
            }

            foreach (var item in qc)
            {
                var concret = GetEntities.FirstOrDefault(w =>
                    w.Головний_розпорядник.Id == item.Головний_розпорядник.Id &&
                    w.КДБ.Id == item.КДБ.Id &&
                    w.КЕКВ.Id == item.КЕКВ.Id &&
                    w.КФК.Id == item.КФК.Id &&
                    w.Мікрофонд.Id == item.Мікрофонд.Id);

                if (concret is null)
                {
                    CurrPlanEntity currPlanEntity = new CurrPlanEntity(Id, e.Month, item.Головний_розпорядник,
                    item.Мікрофонд, item.КФК, item.КЕКВ, item.КДБ, "План",
                                            item.Січень,
                                            item.Лютий,
                                            item.Березень,
                                            item.Квітень,
                                            item.Травень,
                                            item.Червень,
                                            item.Липень,
                                            item.Серпень,
                                            item.Вересень,
                                            item.Жовтень,
                                            item.Листопад,
                                            item.Грудень);

                    GetEntities.Add(currPlanEntity);
                    Id++;
                }
                else
                {
                    concret.Січень += item.Січень;
                    concret.Лютий += item.Лютий;
                    concret.Березень += item.Березень;
                    concret.Квітень += item.Квітень;
                    concret.Травень += item.Травень;
                    concret.Червень += item.Червень;
                    concret.Липень += item.Липень;
                    concret.Серпень += item.Серпень;
                    concret.Вересень += item.Вересень;
                    concret.Жовтень += item.Жовтень;
                    concret.Листопад += item.Листопад;
                    concret.Грудень += item.Грудень;
                    concret.Рік = concret.Січень + concret.Лютий + concret.Березень + concret.Квітень + concret.Травень + concret.Червень + concret.Липень + concret.Серпень + concret.Вересень + concret.Жовтень + concret.Листопад + concret.Грудень;
                    for (int i = 0; i < e.Month; i++)
                    {
                        concret.Період += (double)item.GetType().GetProperty(Func.GetDB.names_months[i].ToString()).GetValue(item);
                    }
                }
            }

            foreach (var item in qf)
            {
                var concret = GetEntities.FirstOrDefault(w =>
                    w.Дані == "Факт" &&
                    w.Головний_розпорядник.Id == item.Головний_розпорядник.Id &&
                    w.КДБ.Id == item.КДБ.Id &&
                    w.КЕКВ.Id == item.КЕКВ.Id &&
                    w.КФК.Id == item.КФК.Id &&
                    w.Мікрофонд.Id == item.Мікрофонд.Id);

                if (concret is null)
                {
                    CurrPlanEntity currPlanEntity = new CurrPlanEntity(Id, e.Month, item.Головний_розпорядник,
                    item.Мікрофонд, item.КФК, item.КЕКВ, item.КДБ, "Факт",
                                            item.Проведено.Month == 1 ? item.Сума : 0,
                                            item.Проведено.Month == 2 ? item.Сума : 0,
                                            item.Проведено.Month == 3 ? item.Сума : 0,
                                            item.Проведено.Month == 4 ? item.Сума : 0,
                                            item.Проведено.Month == 5 ? item.Сума : 0,
                                            item.Проведено.Month == 6 ? item.Сума : 0,
                                            item.Проведено.Month == 7 ? item.Сума : 0,
                                            item.Проведено.Month == 8 ? item.Сума : 0,
                                            item.Проведено.Month == 9 ? item.Сума : 0,
                                            item.Проведено.Month == 10 ? item.Сума : 0,
                                            item.Проведено.Month == 11 ? item.Сума : 0,
                                            item.Проведено.Month == 12 ? item.Сума : 0);

                    GetEntities.Add(currPlanEntity);
                    Id++;
                }
                else
                {
                    concret.Січень += item.Проведено.Month == 1 ? item.Сума : 0;
                    concret.Лютий += item.Проведено.Month == 2 ? item.Сума : 0;
                    concret.Березень += item.Проведено.Month == 3 ? item.Сума : 0;
                    concret.Квітень += item.Проведено.Month == 4 ? item.Сума : 0;
                    concret.Травень += item.Проведено.Month == 5 ? item.Сума : 0;
                    concret.Червень += item.Проведено.Month == 6 ? item.Сума : 0;
                    concret.Липень += item.Проведено.Month == 7 ? item.Сума : 0;
                    concret.Серпень += item.Проведено.Month == 8 ? item.Сума : 0;
                    concret.Вересень += item.Проведено.Month == 9 ? item.Сума : 0;
                    concret.Жовтень += item.Проведено.Month == 10 ? item.Сума : 0;
                    concret.Листопад += item.Проведено.Month == 11 ? item.Сума : 0;
                    concret.Грудень += item.Проведено.Month == 12 ? item.Сума : 0;
                    concret.Рік = concret.Січень + concret.Лютий + concret.Березень + concret.Квітень + concret.Травень + concret.Червень + concret.Липень + concret.Серпень + concret.Вересень + concret.Жовтень + concret.Листопад + concret.Грудень;
                    concret.Період += item.Проведено.Date >= s && item.Проведено.Date <= e ? item.Сума : 0;
                }
            }
            var og = GetEntities.Where(w => w.Дані == "План").ToList();
            foreach (var item in og)
            {
                var fact = GetEntities.FirstOrDefault(f => f.Головний_розпорядник.Id == item.Головний_розпорядник.Id && f.КДБ.Id == item.КДБ.Id &&
                f.КЕКВ.Id == item.КЕКВ.Id && f.КФК.Id == item.КФК.Id && f.Мікрофонд.Id == item.Мікрофонд.Id && f.Дані == "Факт");

                CurrPlanEntity currPlanEntity = new CurrPlanEntity(Id, e.Month, item.Головний_розпорядник,
                    item.Мікрофонд, item.КФК, item.КЕКВ, item.КДБ, "Н_Залишок",
                                            fact == null ? item.Січень : item.Січень - fact.Січень,
                                            fact == null ? item.Лютий : item.Лютий - fact.Лютий,
                                            fact == null ? item.Березень : item.Березень - fact.Березень,
                                            fact == null ? item.Квітень : item.Квітень - fact.Квітень,
                                            fact == null ? item.Травень : item.Травень - fact.Травень,
                                            fact == null ? item.Червень : item.Червень - fact.Червень,
                                            fact == null ? item.Липень : item.Липень - fact.Липень,
                                            fact == null ? item.Серпень : item.Серпень - fact.Серпень,
                                            fact == null ? item.Вересень : item.Вересень - fact.Вересень,
                                            fact == null ? item.Жовтень : item.Жовтень - fact.Жовтень,
                                            fact == null ? item.Листопад : item.Листопад - fact.Листопад,
                                            fact == null ? item.Грудень : item.Грудень - fact.Грудень);
                GetEntities.Add(currPlanEntity);
                Id++;
                CurrPlanEntity currPlanEntityTwo = new CurrPlanEntity(Id, e.Month, item.Головний_розпорядник,
                    item.Мікрофонд, item.КФК, item.КЕКВ, item.КДБ, "М_Залишок",
                                            fact == null ? item.Січень : item.Січень - fact.Січень,
                                            fact == null ? item.Лютий : item.Лютий - fact.Лютий,
                                            fact == null ? item.Березень : item.Березень - fact.Березень,
                                            fact == null ? item.Квітень : item.Квітень - fact.Квітень,
                                            fact == null ? item.Травень : item.Травень - fact.Травень,
                                            fact == null ? item.Червень : item.Червень - fact.Червень,
                                            fact == null ? item.Липень : item.Липень - fact.Липень,
                                            fact == null ? item.Серпень : item.Серпень - fact.Серпень,
                                            fact == null ? item.Вересень : item.Вересень - fact.Вересень,
                                            fact == null ? item.Жовтень : item.Жовтень - fact.Жовтень,
                                            fact == null ? item.Листопад : item.Листопад - fact.Листопад,
                                            fact == null ? item.Грудень : item.Грудень - fact.Грудень);
                GetEntities.Add(currPlanEntityTwo);
                Id++;
            }
        }
    }
    class CurrPlanEntity
    {
        public CurrPlanEntity(long id, int Month, Main_manager main_Manager, MicroFoundation microFoundation, KFK kfk, KEKB kekb, KDB kdb, string type, double one, double two, double three, double four, double five, double six, double seven, double eight, double nine, double ten, double eleven, double twelve)
        {
            Id = id;
            Головний_розпорядник = main_Manager;
            Фонд = microFoundation.Фонд;
            Мікрофонд = microFoundation;
            КФК = kfk;
            КЕКВ = kekb;
            КДБ = kdb;
            Дані = type;

            if (type == "Н_Залишок")
            {
                Рік = one + two + three + four + five + six + seven + eight + nine + ten + eleven + twelve;
                Січень = one;
                Лютий = one + two;
                Березень = one + two + three;
                Квітень = one + two + three + four;
                Травень = one + two + three + four + five;
                Червень = one + two + three + four + five + six;
                Липень = one + two + three + four + five + six + seven;
                Серпень = one + two + three + four + five + six + seven + eight;
                Вересень = one + two + three + four + five + six + seven + eight + nine;
                Жовтень = one + two + three + four + five + six + seven + eight + nine + ten;
                Листопад = one + two + three + four + five + six + seven + eight + nine + ten + eleven;
                Грудень = one + two + three + four + five + six + seven + eight + nine + ten + eleven + twelve;

                Період = (double)GetType().GetProperty(Func.GetDB.names_months[Month - 1].ToString()).GetValue(this);
            }
            else if (type == "М_Залишок")
            {
                Рік = one + two + three + four + five + six + seven + eight + nine + ten + eleven + twelve;
                Січень = one;
                Лютий = two;
                Березень = three;
                Квітень = four;
                Травень = five;
                Червень = six;
                Липень = seven;
                Серпень = eight;
                Вересень = nine;
                Жовтень = ten;
                Листопад = eleven;
                Грудень = twelve;

                for (int i = 0; i < Month; i++)
                {
                    Період += (double)GetType().GetProperty(Func.GetDB.names_months[i].ToString()).GetValue(this);
                }
            }
            else
            {
                Рік = one + two + three + four + five + six + seven + eight + nine + ten + eleven + twelve;
                Січень = one;
                Лютий = two;
                Березень = three;
                Квітень = four;
                Травень = five;
                Червень = six;
                Липень = seven;
                Серпень = eight;
                Вересень = nine;
                Жовтень = ten;
                Листопад = eleven;
                Грудень = twelve;

                for (int i = 0; i < Month; i++)
                {
                    Період += (double)GetType().GetProperty(Func.GetDB.names_months[i].ToString()).GetValue(this);
                }
            }
        }

        public long Id { get; set; }
        public Foundation Фонд { get; set; }
        public MicroFoundation Мікрофонд { get; set; }
        public KFK КФК { get; set; }
        public Main_manager Головний_розпорядник { get; set; }
        public KDB КДБ { get; set; }
        public KEKB КЕКВ { get; set; }
        public string Дані { get; set; }
        public double Рік { get; set; }
        public double Період { get; set; }
        public double Січень { get; set; }
        public double Лютий { get; set; }
        public double Березень { get; set; }
        public double Квітень { get; set; }
        public double Травень { get; set; }
        public double Червень { get; set; }
        public double Липень { get; set; }
        public double Серпень { get; set; }
        public double Вересень { get; set; }
        public double Жовтень { get; set; }
        public double Листопад { get; set; }
        public double Грудень { get; set; }
    }

    class SandBoxEntities
    {
        public ObservableCollection<SandBoxEntity> GetSandBoxEntities { get; set; }
        public SandBoxEntities()
        {
            GetSandBoxEntities = new ObservableCollection<SandBoxEntity>();
            GetSandBoxEntities.CollectionChanged += GetSandBoxEntities_CollectionChanged;
        }
        private void GetSandBoxEntities_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Add)
            {
                foreach (SandBoxEntity item in e.NewItems)
                {
                    item.Id = GetSandBoxEntities.Select(s => s.Id).Max() + 1;
                }
            }
        }
    }
    class SandBoxEntity
    {
        public int Id { get; set; }
        public Foundation Фонд { get; set; }
        public MicroFoundation Мікрофонд { get; set; }
        public KFK КФК { get; set; }
        public Main_manager Головний_розпорядник { get; set; }
        public KDB КДБ { get; set; }
        public KEKB КЕКВ { get; set; }
        public string Дані { get; set; }
        public string Значення { get; set; }
        public string Операція { get; set; }
    }

    #region "Converters"

    public class AccumulativelyCurrBalanceGroupTotalConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Рік).Sum() -
                               ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Рік).Sum() -
                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupCurrentConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Період).Sum() -
                               ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Період).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Період).Sum() -
                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Період).Sum();
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupOneConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Січень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupTwoConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Лютий";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupThreeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Березень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupFourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Квітень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupFiveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Травень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupSixConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Червень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupSevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Липень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupEightConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Серпень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupNineConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Вересень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupTenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Жовтень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupElevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Листопад";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }
    public class AccumulativelyCurrBalanceGroupTwelveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Грудень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                        {
                            sum += (((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                            .Sum() -

                                   ((CollectionViewGroup)items[i]).Items
                                        .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                        .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                        .Sum());
                        }
                    }
                }
                return sum;
            }
            else
            {
                for (int m = 0; m <= Func.GetDB.names_months.IndexOf(month); m++)
                {
                    sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                    .Sum() -

                           items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                .Select(s => (double)s.GetType().GetProperty(Func.GetDB.names_months[m]).GetValue(s))
                                .Sum());
                }
                return sum;
            }
        }
    }

    public class MonthCurrBalanceGroupTotalConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Рік).Sum() -
                               ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Рік).Sum() -
                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupCurrentConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Період).Sum() -
                               ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Період).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Період).Sum() -
                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Період).Sum();
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupOneConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Січень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupTwoConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Лютий";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupThreeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Березень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupFourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Квітень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupFiveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Травень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupSixConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Червень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupSevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Липень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupEightConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Серпень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupNineConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Вересень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupTenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Жовтень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupElevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Листопад";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }
    public class MonthCurrBalanceGroupTwelveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            string month = "Грудень";
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                        .Sum() -

                               ((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                                .Sum() -

                       items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => (double)s.GetType().GetProperty(month).GetValue(s))
                            .Sum());
                return sum;
            }
        }
    }

    public class CurrPlanGroupTotalConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                return sum;
            }
        }
    }
    public class CurrPlanGroupCurrentConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Період).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "План").Select(s => ((CurrPlanEntity)s).Період).Sum();
                return sum;
            }
        }
    }
    public class CurrPlanGroupOneConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Січень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Січень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupTwoConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Лютий)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Лютий)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupThreeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Березень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Березень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupFourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Квітень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Квітень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupFiveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Травень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Травень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupSixConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Червень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Червень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupSevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Липень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Липень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupEightConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Серпень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Серпень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupNineConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Вересень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Вересень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupTenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Жовтень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Жовтень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupElevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Листопад)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Листопад)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPlanGroupTwelveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "План")
                                    .Select(s => ((CurrPlanEntity)s).Грудень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "План")
                            .Select(s => ((CurrPlanEntity)s).Грудень)
                            .Sum());
                return sum;
            }
        }
    }

    public class CurrPayGroupTotalConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Рік).Sum();
                return sum;
            }
        }
    }
    public class CurrPayGroupCurrentConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += ((CollectionViewGroup)items[i]).Items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Період).Sum();
                    }
                }
                return sum;
            }
            else
            {
                sum += items.Where(w => ((CurrPlanEntity)w).Дані == "Факт").Select(s => ((CurrPlanEntity)s).Період).Sum();
                return sum;
            }
        }
    }
    public class CurrPayGroupOneConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Січень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Січень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupTwoConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Лютий)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Лютий)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupThreeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Березень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Березень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupFourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Квітень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Квітень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupFiveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Травень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Травень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupSixConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Червень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Червень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupSevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Липень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Липень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupEightConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Серпень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Серпень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupNineConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Вересень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Вересень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupTenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Жовтень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Жовтень)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupElevenConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Листопад)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Листопад)
                            .Sum());
                return sum;
            }
        }
    }
    public class CurrPayGroupTwelveConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (null == value)
            {
                return "null";
            }

            ReadOnlyObservableCollection<object> items = (ReadOnlyObservableCollection<object>)value;

            return CheckedFillingItems(items).ToString("N2", CultureInfo.CreateSpecificCulture("ru-RU"));
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
        private static double CheckedFillingItems(ReadOnlyObservableCollection<object> items)
        {
            var delta = items.FirstOrDefault(s => s.GetType().GetProperties().Select(p => p.Name).ToList().Contains("Items"));
            double sum = 0;
            if (delta != null)
            {
                for (int i = 0; i < items.Count; i++)
                {
                    if (((CollectionViewGroup)items[i]).Items.FirstOrDefault(f => f.GetType().GetProperties().Select(s => s.Name).ToList().Contains("Items")) != null)
                    {
                        sum += CheckedFillingItems(((CollectionViewGroup)items[i]).Items);
                    }
                    else
                    {
                        sum += (((CollectionViewGroup)items[i]).Items
                                    .Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                                    .Select(s => ((CurrPlanEntity)s).Грудень)
                                    .Sum());
                    }
                }
                return sum;
            }
            else
            {
                sum += (items.Where(w => ((CurrPlanEntity)w).Дані == "Факт")
                            .Select(s => ((CurrPlanEntity)s).Грудень)
                            .Sum());
                return sum;
            }
        }
    }

    #endregion
}
